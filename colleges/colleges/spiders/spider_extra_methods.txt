               
        for page_num in response.css("div.college-list--cards-pager nav.pager ul.pager_items.js-pager_items li.pager_items a::attr(href)").getall():
            nxt_page = response.url + "?page=" + page_num
            yield scrapy.Request(nxt_page, callback = self.parse_gpa_nxt_pg)

            
    def parse_gpa_nxt_pg(self, response):
        '''
        Meant to parse any additional pages for all colleges of a given GPA
        Returns the acceptance rate for each college
        '''
        
        for college in response.css("article.college-list--card.gpa-result div.college-list--card-head div.college-list--card-title-wrap div.college-list--card-title div.college-list--card-title-conatiner a::text").getall():  

            college = college
            gpa = response.css("article.college-list--card.gpa-result div.college-list--card-footer div.college-list--card-outer div.college-list--card-inner div.college-list--card-data-val div.field.average-gpa::text").get()

            yield {"College" : college, "GPA" : gpa}
            
            
    def parse_acceptance_rate(self, response):
        for college in response.css("article.college-list--card.gpa-result div.college-list--card-head div.college-list--card-title-wrap div.college-list--card-title div.college-list--card-title-conatiner a").getall():       
            acceptance_rate = response.css("div.college-list--cards article.college-list--card.gpa-result div.college-list--card-footer div.college-list--card-outer div.college-list--card-inner div.college-list--card-data-val div.field.acceptance-rate").get()            

            yield {"College" : college, 
            "Acceptance Rate" : acceptance_rate}


    def parse_type_institution(self, response):
        '''
        # Meant to parse the page for all colleges of a given GPA
        # Returns the type of institution (public or private) for each college
        '''

        for college in response.css("article.college-list--card.gpa-result div.college-list--card-head div.college-list--card-title-wrap div.college-list--card-title div.college-list--card-title-conatiner a").getall():       

            idx = -1
            for (i, match) in enumerate(response.css("div.college-list--card-data-label")):
                if match.get() == "type of institution":
                    idx = i
                    break
            type_institution = response.css("div.college-list--card-data-val")[i].get()

            yield {"College" : college, 
            "Type of Institution" : type_institution}


    def parse_number_of_undergrad(self, response): 
        '''
        #Meant to parse the page for all colleges of a given GPA
        #Returns the number of undergraduate students for each college
        '''

        for college in response.css("article.college-list--card.gpa-result div.college-list--card-head div.college-list--card-title-wrap div.college-list--card-title div.college-list--card-title-conatiner a").getall():       

            idx = -1
            for (i, match) in enumerate(response.css("div.college-list--card-data-label")):
                if match.get() == "number of students":
                    idx = i
                    break
            num_students = response.css("div.college-list--card-data-val")[i].get()

            yield {"College" : college, 
            "Number of Undergraduate Students" : (num_students/4)}